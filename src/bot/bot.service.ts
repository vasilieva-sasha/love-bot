import { Injectable } from '@nestjs/common';
import { Context } from 'telegraf';
import { MenuService } from '../menu/menu.service';
import { UserService } from '../user/user.service';
import {
  mainMenuKeyboard,
  doneKeyboard,
  buildMenuManagementKeyboard,
  buildPartnerMenuKeyboard,
  currencyKeyboard,
  confirmResetKeyboard,
} from './bot.keyboards';
import { OrderService } from 'src/order/order.service';
import { Currency, OrderStatus } from 'src/order/order.entity';
import { InviteService } from 'src/invite/invite.service';

@Injectable()
export class BotService {
  private userStates = new Map<number, string>(); // —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–µ–Ω—é
  private editingMenuItem = new Map<number, string>(); // id –ø—É–Ω–∫—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  private orderState = new Map<
    number,
    { menuItemId: string; currency?: Currency; message?: string }
  >(); // —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤

  constructor(
    private menuService: MenuService,
    private userService: UserService,
    private orderService: OrderService,
    private inviteService: InviteService,
  ) {}

  // ========== –•–ï–õ–ü–ï–†–´ ==========
  private getUserId(ctx: Context): string | null {
    return ctx.from?.id ? ctx.from.id.toString() : null;
  }

  private async ensureUser(ctx: Context) {
    const userId = this.getUserId(ctx);
    if (!userId) return null;

    let user = await this.userService.findByTelegramId(userId);
    if (!user) {
      user = await this.userService.create({
        telegramId: userId,
        name: ctx.from?.first_name || '–ë–µ–∑ –∏–º–µ–Ω–∏',
      });
    }
    return user;
  }

  // ========== –°–¢–ê–†–¢ –ò –ú–ï–ù–Æ ==========
  async handleStart(ctx: Context) {
    const user = await this.ensureUser(ctx);
    if (!user) return;

    const text = `–ü—Ä–∏–≤–µ—Ç! üëã

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –ø–∞—Ä–∞–º —Ä–∞–¥–æ–≤–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –º–∏–ª—ã–º–∏ —Å—é—Ä–ø—Ä–∏–∑–∞–º–∏:

‚Ä¢ –ü—Ä–∏–¥—É–º–∞–π—Ç–µ —Å–≤–æ–π —Å–ø–∏—Å–æ–∫ –∑–∞–±–æ—Ç—ã (–º–∞—Å—Å–∞–∂, —É–∂–∏–Ω –∏ —Ç.–¥.)
‚Ä¢ –ó–∞–∫–∞–∑—ã–≤–∞–π—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥—É —ç—Ç–∏ —Å—é—Ä–ø—Ä–∏–∑—ã –∑–∞ ¬´–≤–∞–ª—é—Ç—É –ª—é–±–≤–∏¬ª (–ø–æ—Ü–µ–ª—É–∏, –æ–±–Ω–∏–º–∞—à–∫–∏, –ø–æ—Å–ª–∞–Ω–∏—è)
‚Ä¢ –ö–æ–ø–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏ —Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤

–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?`;

    await ctx.reply(text, mainMenuKeyboard);
  }

  async startMenuCreation(ctx: Context) {
    const user = await this.ensureUser(ctx);
    if (!user) return;

    this.userStates.set(Number(user.telegramId), 'ADDING_MENU');
    await ctx.reply(
      '–ù–∞–ø–∏—à–∏ –ø–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–∞—Å—Å–∞–∂, –∑–∞–≤—Ç—Ä–∞–∫). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å ‚Äî –Ω–∞–∂–º–∏ "–ì–æ—Ç–æ–≤–æ".',
      doneKeyboard,
    );
  }

  async showMenu(ctx: Context) {
    const user = await this.ensureUser(ctx);
    if (!user) return;

    const items = await this.menuService.findByOwner(user.telegramId);

    if (items.length === 0) {
      await ctx.reply(
        '–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –ù–∞–∂–º–∏ "–î–æ–±–∞–≤–∏—Ç—å –ø—É–Ω–∫—Ç –≤ –º–æ–π —Å–ø–∏—Å–æ–∫", —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø—É–Ω–∫—Ç—ã.',
      );
      return;
    }

    const list = items.map((i) => `‚Ä¢ ${i.title}`).join('\n');
    await ctx.reply(
      `–¢–≤–æ–∏ —Å—é—Ä–ø—Ä–∏–∑—ã:\n${list}\n\n–ù–∞–∂–º–∏ –Ω–∞ –ø—É–Ω–∫—Ç, —á—Ç–æ–±—ã –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –µ–≥–æ:`,
      buildMenuManagementKeyboard(items),
    );
  }

  async startEditMenuItem(ctx: Context, itemId: string) {
    const user = await this.ensureUser(ctx);
    if (!user) return;

    const item = await this.menuService.findOne(itemId);
    if (!item) return;

    this.editingMenuItem.set(Number(user.telegramId), itemId);
    await ctx.reply(`–ù–∞–ø–∏—à–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è "${item.title}":`);
  }

  async deleteMenuItem(ctx: Context, itemId: string) {
    const user = await this.ensureUser(ctx);
    if (!user) return;

    await this.menuService.remove(itemId);

    try {
      await ctx.deleteMessage(); // —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ä–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    } catch {}

    return this.showMenu(ctx); // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
  }

  // ========== –†–ê–ë–û–¢–ê –° –ü–ê–†–¢–ù–Å–†–û–ú ==========
  async showPartnerMenu(ctx: Context) {
    const user = await this.ensureUser(ctx);
    if (!user) return;

    if (!user.coupleId) {
      await ctx.reply(
        '–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø–∞—Ä—ã. –ü—Ä–∏–≥–ª–∞—Å–∏ –ø–∞—Ä—Ç–Ω—ë—Ä–∞, —á—Ç–æ–±—ã —Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.',
      );
      return;
    }

    const partner = await this.userService.findPartner(user.telegramId);
    if (!partner) {
      await ctx.reply('–ü–∞—Ä—Ç–Ω—ë—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      return;
    }

    const items = await this.menuService.findByOwner(partner.telegramId);
    if (items.length === 0) {
      await ctx.reply('–ü–∞—Ä—Ç–Ω—ë—Ä –µ—â—ë –Ω–µ –ø—Ä–∏–¥—É–º–∞–ª —Å—é—Ä–ø—Ä–∏–∑—ã.');
      return;
    }

    await ctx.reply('–°—é—Ä–ø—Ä–∏–∑—ã –¥–ª—è —Ç–µ–±—è:', buildPartnerMenuKeyboard(items));
  }

  async generateInviteLink(ctx: Context) {
    const user = await this.ensureUser(ctx);
    if (!user) return;

    if (user.coupleId) {
      await ctx.reply('–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –ø–∞—Ä–∞ ‚Äî –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è ‚ù§Ô∏è');
      return;
    }

    const invite = await this.inviteService.createInvite(user.id);
    const botUsername = (await ctx.telegram.getMe()).username;
    const link = `https://t.me/${botUsername}?start=invite_${invite.token}`;

    await ctx.reply(`–û—Ç–ø—Ä–∞–≤—å —ç—Ç—É —Å—Å—ã–ª–∫—É –ø–∞—Ä—Ç–Ω—ë—Ä—É:\n${link}`);
  }

  async handleInvite(ctx: Context, token: string) {
    const user = await this.ensureUser(ctx);
    if (!user) return;
    const invite = await this.inviteService.findByToken(token);

    if (invite?.creatorId === user.id) {
      await ctx.reply('–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É üòÖ');
      return;
    }

    const creatorId = await this.inviteService.useInvite(token);
    if (!creatorId) {
      await ctx.reply('–≠—Ç–∞ —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞.');
      return;
    }

    if (user.coupleId) {
      await ctx.reply('–¢—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ –ø–∞—Ä–µ ‚ù§Ô∏è');
      const invite = await this.inviteService.findByToken(token);
      if (invite) {
        const creator = await this.userService.findById(invite.creatorId);
        if (creator?.telegramId) {
          await ctx.telegram.sendMessage(
            Number(creator.telegramId),
            '–ß–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä–æ–º—É —Ç—ã –æ—Ç–ø—Ä–∞–≤–∏–ª —Å—Å—ã–ª–∫—É, —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –ø–∞—Ä–µ –∏ –Ω–µ –º–æ–∂–µ—Ç –µ—ë –ø—Ä–∏–Ω—è—Ç—å.',
          );
        }
      }
      return;
    }

    await this.userService.createCouple(creatorId, user.id);
    await this.handleStart(ctx);
  }

  // ========== –ó–ê–ö–ê–ó–´ ==========
  async startOrder(ctx: Context, menuItemId: string) {
    const user = await this.ensureUser(ctx);
    if (!user) return;

    this.orderState.set(Number(user.telegramId), { menuItemId });
    await ctx.reply('–í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞:', currencyKeyboard);
  }

  async chooseCurrency(ctx: Context, currency: Currency) {
    const user = await this.ensureUser(ctx);
    if (!user) return;

    const state = this.orderState.get(Number(user.telegramId));
    if (!state) return;

    state.currency = currency;
    this.orderState.set(Number(user.telegramId), state);

    await ctx.reply(
      `–£–∫–∞–∂–∏ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–∑–∞–≤—Ç—Ä–∞", "–¥–æ ${new Date(Date.now() + 24 * 60 * 60 * 1000).toLocaleDateString('ru-RU')}"):`,
    );
  }

  async acceptOrder(ctx: Context, orderId: string) {
    const order = await this.orderService.findById(orderId);
    if (!order) {
      await ctx.reply('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.');
      return;
    }

    await this.orderService.updateStatus(orderId, OrderStatus.ACCEPTED);

    await ctx.editMessageText(
      '–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –ö–æ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω–∏—à—å ‚Äî –Ω–∞–∂–º–∏ "–í—ã–ø–æ–ª–Ω–µ–Ω–æ".',
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ üéâ', callback_data: `complete_${orderId}` }],
          ],
        },
      },
    );

    const sender = await this.userService.findById(order.fromUserId);
    if (sender?.telegramId) {
      await ctx.telegram.sendMessage(
        Number(sender.telegramId),
        `–¢–≤–æ–π –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –ñ–¥—ë–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è üíï`,
      );
    }
  }

  async rejectOrder(ctx: Context, orderId: string) {
    const order = await this.orderService.findById(orderId);
    if (!order) {
      await ctx.reply('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.');
      return;
    }

    await this.orderService.updateStatus(orderId, OrderStatus.REJECTED);
    await ctx.editMessageText('–ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω—ë–Ω ‚ùå');

    const sender = await this.userService.findById(order.fromUserId);
    if (sender?.telegramId) {
      await ctx.telegram.sendMessage(
        Number(sender.telegramId),
        '–¢–≤–æ–π –∑–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω—ë–Ω üòî',
      );
    }
  }

  async completeOrder(ctx: Context, orderId: string) {
    const order = await this.orderService.findById(orderId);
    if (!order) {
      await ctx.reply('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      return;
    }

    await this.orderService.updateStatus(orderId, OrderStatus.COMPLETED);
    await ctx.editMessageText('–ó–∞–∫–∞–∑ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π üéâ');

    // –í–∞–ª—é—Ç–∞ ‚Äî –ø–æ—Ü–µ–ª—É–π –∏–ª–∏ –æ–±–Ω–∏–º–∞—à–∫–∞
    if (order.currency !== 'message') {
      const executor = await this.userService.findById(order.toUserId);
      if (executor) {
        if (order.currency === 'kiss') {
          await this.userService.updateBalance(executor.id, {
            kissesBalance: executor.kissesBalance + 1,
          });
        } else if (order.currency === 'hug') {
          await this.userService.updateBalance(executor.id, {
            hugsBalance: executor.hugsBalance + 1,
          });
        }
      }

      const creator = await this.userService.findById(order.fromUserId);
      if (creator?.telegramId) {
        await ctx.telegram.sendMessage(
          Number(creator.telegramId),
          `–¢–≤–æ–π –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω! –í–∞–ª—é—Ç–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∞ üéâ`,
        );
      }
      return;
    }

    // –í–∞–ª—é—Ç–∞ ‚Äî –ø–æ—Å–ª–∞–Ω–∏–µ
    const creator = await this.userService.findById(order.fromUserId);
    if (creator?.telegramId) {
      await ctx.telegram.sendMessage(
        Number(creator.telegramId),
        `–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –ø–æ—Å–ª–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—É—á–∏—Ç —Ç–≤–æ–π –ø–∞—Ä—Ç–Ω—ë—Ä üíå`,
      );

      this.orderState.set(Number(creator.telegramId), {
        menuItemId: order.menuItemId,
        currency: Currency.MESSAGE,
        message: `order:${orderId}`,
      });
    }
  }

  // ========== –•–≠–ù–î–õ–ï–† –¢–ï–ö–°–¢–û–í–û–ì–û –í–í–û–î–ê ==========
  async handleMenuInput(ctx: Context) {
    const userId = this.getUserId(ctx);
    if (!userId) return;

    const text = (ctx.message as any)?.text;
    if (!text) return;

    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ -> –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ -> –∑–∞–∫–∞–∑—ã/–ø–æ—Å–ª–∞–Ω–∏—è
    if (this.editingMenuItem.has(Number(userId))) {
      return this.processEditMenuInput(userId, text, ctx);
    }

    if (this.userStates.get(Number(userId)) === 'ADDING_MENU') {
      return this.processAddMenuInput(userId, text, ctx);
    }

    const pending = this.orderState.get(Number(userId));
    if (
      pending?.currency === 'message' &&
      pending.message?.startsWith('order:')
    ) {
      return this.processOrderMessageInput(userId, text, ctx, pending.message);
    } else if (pending?.currency) {
      return this.processOrderDeadlineInput(userId, text, ctx, pending);
    }
  }

  // –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è handleMenuInput
  private async processEditMenuInput(
    userId: string,
    text: string,
    ctx: Context,
  ) {
    const editingId = this.editingMenuItem.get(Number(userId));
    if (!editingId) return;

    await this.menuService.updateTitle(editingId, text);
    this.editingMenuItem.delete(Number(userId));
    await ctx.reply(`–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ "${text}"`);

    return this.showMenu(ctx);
  }

  private async processAddMenuInput(
    userId: string,
    text: string,
    ctx: Context,
  ) {
    if (text === '–ì–æ—Ç–æ–≤–æ') {
      this.userStates.delete(Number(userId));
      const items = await this.menuService.findByOwner(userId);
      const list = items.map((i) => `‚Ä¢ ${i.title}`).join('\n') || '–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç';
      await ctx.reply(`–¢–≤–æ–π —Å–ø–∏—Å–æ–∫:\n${list}`, mainMenuKeyboard);
      const partner = await this.userService.findPartner(userId);
      if (partner?.telegramId) {
        await ctx.telegram.sendMessage(
          Number(partner.telegramId),
          `–¢–≤–æ–π –ø–∞—Ä—Ç–Ω—ë—Ä –æ–±–Ω–æ–≤–∏–ª —Å–≤–æ–π —Å–ø–∏—Å–æ–∫ —Å—é—Ä–ø—Ä–∏–∑–æ–≤! üíï\n\n${list}`,
        );
      }
      return;
    }

    await this.menuService.create(userId, text);
    await ctx.reply(
      `–î–æ–±–∞–≤–ª–µ–Ω–æ: "${text}". –ù–∞–ø–∏—à–∏ —Å–ª–µ–¥—É—é—â–∏–π –ø—É–Ω–∫—Ç –∏–ª–∏ –Ω–∞–∂–º–∏ "–ì–æ—Ç–æ–≤–æ".`,
    );
  }

  private async processOrderMessageInput(
    userId: string,
    text: string,
    ctx: Context,
    messageState: string,
  ) {
    const orderId = messageState.split(':')[1];
    const order = await this.orderService.findById(orderId);

    if (order) {
      await this.orderService.update(orderId, { message: text });

      const executor = await this.userService.findById(order.toUserId);
      if (executor?.telegramId) {
        await ctx.telegram.sendMessage(
          Number(executor.telegramId),
          `–¢–µ–±–µ –ø–æ—Å–ª–∞–Ω–∏–µ –æ—Ç –ø–∞—Ä—Ç–Ω—ë—Ä–∞:\n\n"${text}" üíå`,
        );
      }
    }

    this.orderState.delete(Number(userId));
    await ctx.reply('–ü–æ—Å–ª–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
  }

  private async processOrderDeadlineInput(
    userId: string,
    text: string,
    ctx: Context,
    pending: { menuItemId: string; currency?: Currency },
  ) {
    const user = await this.userService.findByTelegramId(userId);
    const partner = await this.userService.findPartner(userId);

    if (!partner) {
      await ctx.reply('–ü–∞—Ä—Ç–Ω—ë—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      this.orderState.delete(Number(userId));
      return;
    }

    const newOrder = await this.orderService.create({
      fromUserId: user?.id,
      toUserId: partner.id,
      menuItemId: pending.menuItemId,
      currency: pending.currency,
      deadline: text,
      status: OrderStatus.PENDING,
    });

    await ctx.reply(`–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–∞—Ä—Ç–Ω—ë—Ä—É!`);

    const menuItem = await this.menuService.findOne(pending.menuItemId);

    await ctx.telegram.sendMessage(
      Number(partner.telegramId),
      `–¢–µ–±–µ –∑–∞–∫–∞–∑–∞–ª–∏: ${menuItem?.title || ''} ${pending.currency}\n–°—Ä–æ–∫: ${text}\n–ü—Ä–∏–Ω—è—Ç—å?`,
      {
        reply_markup: {
          inline_keyboard: [
            [
              { text: '–ü—Ä–∏–Ω—è—Ç—å ‚úÖ', callback_data: `accept_${newOrder.id}` },
              { text: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å ‚ùå', callback_data: `reject_${newOrder.id}` },
            ],
          ],
        },
      },
    );

    this.orderState.delete(Number(userId));
  }

  // ========== –ü–†–û–ß–ï–ï ==========
  async confirmReset(ctx: Context) {
    await ctx.reply(
      '–¢—ã —Ç–æ—á–Ω–æ —Ö–æ—á–µ—à—å —Ä–∞–∑–æ—Ä–≤–∞—Ç—å –ø–∞—Ä—É? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.',
      confirmResetKeyboard,
    );
  }

  async handleResetConfirm(ctx: Context) {
    const user = await this.ensureUser(ctx);
    if (!user) return;

    const partnerId = await this.userService.resetCouple(user.id);

    if (!partnerId) {
      await ctx.editMessageText('–£ —Ç–µ–±—è –Ω–µ—Ç –ø–∞—Ä—ã –¥–ª—è —Å–±—Ä–æ—Å–∞.');
      return;
    }

    await ctx.editMessageText(
      '–ü–∞—Ä–∞ —Ä–∞–∑–æ—Ä–≤–∞–Ω–∞. –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é.',
    );

    const partner = await this.userService.findById(partnerId);
    if (partner?.telegramId) {
      await ctx.telegram.sendMessage(
        Number(partner.telegramId),
        '–¢–≤–æ–π –ø–∞—Ä—Ç–Ω—ë—Ä —Ä–∞–∑–æ—Ä–≤–∞–ª –ø–∞—Ä—É. –¢–µ–ø–µ—Ä—å –≤—ã –±–æ–ª—å—à–µ –Ω–µ —Å–≤—è–∑–∞–Ω—ã.',
      );
    }
  }

  async handleResetCancel(ctx: Context) {
    await ctx.editMessageText('–°–±—Ä–æ—Å –ø–∞—Ä—ã –æ—Ç–º–µ–Ω—ë–Ω.');
  }

  async showBalance(ctx: Context) {
    const user = await this.ensureUser(ctx);
    if (!user) return;

    await ctx.reply(
      `–¢–≤–æ–π –±–∞–ª–∞–Ω—Å:\n\n–ü–æ—Ü–µ–ª—É–µ–≤: ${user.kissesBalance}\n–û–±–Ω–∏–º–∞—à–µ–∫: ${user.hugsBalance}`,
    );
  }

  async showOrderHistory(ctx: Context) {
    const user = await this.ensureUser(ctx);
    if (!user) return;

    const orders = await this.orderService.findByUser(user.id);

    if (orders.length === 0) {
      await ctx.reply('–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.');
      return;
    }

    const history: string[] = [];
    for (const order of orders) {
      const role =
        order.fromUserId === user.id ? '–¢—ã –∑–∞–∫–∞–∑–∞–ª' : '–¢–µ–±–µ –∑–∞–∫–∞–∑–∞–ª–∏';
      const status =
        order.status === OrderStatus.COMPLETED
          ? '‚úÖ –≤—ã–ø–æ–ª–Ω–µ–Ω'
          : order.status === OrderStatus.ACCEPTED
            ? '‚è≥ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ'
            : order.status === OrderStatus.PENDING
              ? '‚åõ –æ–∂–∏–¥–∞–µ—Ç'
              : '‚ùå –æ—Ç–∫–ª–æ–Ω—ë–Ω';
      const menuItem = await this.menuService.findOne(order.menuItemId);
      history.push(
        `${role}: ${menuItem?.title || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} ${order.currency} ‚Äî ${order.deadline} (${status})`,
      );
    }

    await ctx.reply(`–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤:\n\n${history.join('\n\n')}`);
  }
}
