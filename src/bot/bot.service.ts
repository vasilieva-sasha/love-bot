import { Injectable } from '@nestjs/common';
import { Context } from 'telegraf';
import { MenuService } from '../menu/menu.service';
import { UserService } from '../user/user.service';
import {
  mainMenuKeyboard,
  doneKeyboard,
  buildDeleteMenuKeyboard,
  buildMenuManagementKeyboard,
  buildPartnerMenuKeyboard,
  currencyKeyboard,
  confirmResetKeyboard,
} from './bot.keyboards';
import { OrderService } from 'src/order/order.service';
import { Currency, OrderStatus } from 'src/order/order.entity';
import { InviteService } from 'src/invite/invite.service';

@Injectable()
export class BotService {
  private userStates = new Map<number, string>();
  private editingMenuItem = new Map<number, string>(); // userId ‚Üí menuItemId
  private orderState = new Map<
    number,
    { menuItemId: string; currency?: Currency; message?: string }
  >();

  constructor(
    private menuService: MenuService,
    private userService: UserService,
    private orderService: OrderService,
    private inviteService: InviteService,
  ) {}

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è userId
  private getUserId(ctx: Context): string | null {
    const userId = ctx.from?.id;
    return userId ? userId.toString() : null;
  }

  async handleStart(ctx: Context) {
    const text = `–ü—Ä–∏–≤–µ—Ç! üëã

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –ø–∞—Ä–∞–º —Ä–∞–¥–æ–≤–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –Ω–µ–±–æ–ª—å—à–∏–º–∏ —Å—é—Ä–ø—Ä–∏–∑–∞–º–∏:

‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—ë –º–µ–Ω—é –∑–∞–±–æ—Ç—ã ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, –º–∞—Å—Å–∞–∂, —É–∂–∏–Ω –∏–ª–∏ —Å–æ–≤–º–µ—Å—Ç–Ω–∞—è –ø—Ä–æ–≥—É–ª–∫–∞  
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∑–∞–∫–∞–∑—ã –ø–∞—Ä—Ç–Ω—ë—Ä—É —Å –º–∏–ª–æ–π –≤–∞–ª—é—Ç–æ–π: –ø–æ—Ü–µ–ª—É–∏, –æ–±–Ω–∏–º–∞—à–∫–∏ –∏–ª–∏ –ø–æ—Å–ª–∞–Ω–∏–µ  
‚Ä¢ –û—Ç–º–µ—á–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –∫–æ–ø–∏—Ç–µ –±–∞–ª–∞–Ω—Å –≤–∞—à–∏—Ö ¬´–æ–±–Ω–∏–º–∞—à–µ–∫¬ª –∏ ¬´–ø–æ—Ü–µ–ª—É–µ–≤¬ª  

–ì–æ—Ç–æ–≤—ã —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—ë –ø–µ—Ä–≤–æ–µ –º–µ–Ω—é?`;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –º—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (ctx.reply) {
      await ctx.reply(text, mainMenuKeyboard);
    }
  }

  async startMenuCreation(ctx: Context) {
    const userId = this.getUserId(ctx);
    if (!userId) return; // –µ—Å–ª–∏ –Ω–µ—Ç userId ‚Äî –≤—ã—Ö–æ–¥–∏–º

    this.userStates.set(Number(userId), 'ADDING_MENU');

    if (ctx.reply) {
      await ctx.reply(
        '–ù–∞–ø–∏—à–∏ –ø–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–∞—Å—Å–∞–∂, –∑–∞–≤—Ç—Ä–∞–∫). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å ‚Äî –Ω–∞–∂–º–∏ "–ì–æ—Ç–æ–≤–æ".',
        doneKeyboard,
      );
    }
  }

  async handleMenuInput(ctx: Context) {
    const userId = this.getUserId(ctx);
    if (!userId) return;

    const text = (ctx.message as any)?.text;
    if (!text) return;

    // --- –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—É–Ω–∫—Ç ---
    const editingId = this.editingMenuItem.get(Number(userId));
    if (editingId) {
      await this.menuService.updateTitle(editingId, text);
      this.editingMenuItem.delete(Number(userId));
      await ctx.reply(`–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ "${text}"`);

      return this.showMenu(ctx);
    }

    // --- –ï—Å–ª–∏ –≤ —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ---
    const state = this.userStates.get(Number(userId));
    if (state === 'ADDING_MENU') {
      if (text === '–ì–æ—Ç–æ–≤–æ') {
        this.userStates.delete(Number(userId));
        const items = await this.menuService.findByOwner(userId);
        const list =
          items.map((i) => `‚Ä¢ ${i.title}`).join('\n') || '–ú–µ–Ω—é –ø—É—Å—Ç–æ–µ';
        await ctx.reply(`–¢–≤–æ—ë –º–µ–Ω—é:\n${list}`, mainMenuKeyboard);
        return;
      }

      await this.menuService.create(userId, text);
      await ctx.reply(
        `–î–æ–±–∞–≤–ª–µ–Ω–æ: "${text}". –ù–∞–ø–∏—à–∏ —Å–ª–µ–¥—É—é—â–∏–π –ø—É–Ω–∫—Ç –∏–ª–∏ –Ω–∞–∂–º–∏ "–ì–æ—Ç–æ–≤–æ".`,
      );
      return;
    }

    // --- –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –ø–æ—Å–ª–∞–Ω–∏—è ---
    const pending = this.orderState.get(Number(userId));

    // 1. –ï—Å–ª–∏ –∂–¥—ë–º –ø–æ—Å–ª–∞–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    if (
      pending &&
      pending.currency === 'message' &&
      pending.message?.startsWith('order:')
    ) {
      const orderId = pending.message.split(':')[1];
      const order = await this.orderService.findById(orderId);

      if (order) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–∞–Ω–∏–µ
        await this.orderService.update(orderId, { message: text });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–∞–Ω–∏–µ –ø–∞—Ä—Ç–Ω—ë—Ä—É (–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é)
        const executor = await this.userService.findById(order.toUserId);
        if (executor?.telegramId) {
          await ctx.telegram.sendMessage(
            Number(executor.telegramId),
            `–¢–µ–±–µ –ø–æ—Å–ª–∞–Ω–∏–µ –æ—Ç –ø–∞—Ä—Ç–Ω—ë—Ä–∞:\n\n"${text}" üíå`,
          );
        }
      }

      this.orderState.delete(Number(userId));
      await ctx.reply('–ü–æ—Å–ª–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
      return;
    }

    // 2. –ï—Å–ª–∏ –∂–¥—ë–º —Å—Ä–æ–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
    if (pending && pending.currency) {
      const user = await this.userService.findByTelegramId(userId);
      const partner = await this.userService.findPartner(userId);

      if (!partner) {
        await ctx.reply('–ü–∞—Ä—Ç–Ω—ë—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        this.orderState.delete(Number(userId));
        return;
      }

      const newOrder = await this.orderService.create({
        fromUserId: user?.id,
        toUserId: partner.id,
        menuItemId: pending.menuItemId,
        currency: pending.currency,
        deadline: text,
        status: OrderStatus.PENDING,
      });

      await ctx.reply(`–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–∞—Ä—Ç–Ω—ë—Ä—É!`);

      const menuItem = await this.menuService.findOne(pending.menuItemId);

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–∞—Ä—Ç–Ω—ë—Ä–∞
      await ctx.telegram.sendMessage(
        Number(partner.telegramId),
        `–¢–µ–±–µ –∑–∞–∫–∞–∑–∞–ª–∏: ${menuItem?.title || ''} ${pending.currency}\n–°—Ä–æ–∫: ${text}\n–ü—Ä–∏–Ω—è—Ç—å?`,
        {
          reply_markup: {
            inline_keyboard: [
              [
                { text: '–ü—Ä–∏–Ω—è—Ç—å ‚úÖ', callback_data: `accept_${newOrder.id}` },
                {
                  text: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å ‚ùå',
                  callback_data: `reject_${newOrder.id}`,
                },
              ],
            ],
          },
        },
      );

      this.orderState.delete(Number(userId));
      return;
    }
  }

  async showMenu(ctx: Context) {
    const userId = this.getUserId(ctx);
    if (!userId) return;

    const items = await this.menuService.findByOwner(userId);

    if (items.length === 0) {
      if (ctx.reply) {
        await ctx.reply(
          '–ú–µ–Ω—é –ø—É—Å—Ç–æ–µ. –ù–∞–∂–º–∏ "–°–æ–∑–¥–∞—Ç—å –º–µ–Ω—é", —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø—É–Ω–∫—Ç—ã.',
        );
      }
      return;
    }

    const list = items.map((i) => `‚Ä¢ ${i.title}`).join('\n');
    if (ctx.reply) {
      await ctx.reply(
        `–¢–≤–æ—ë –º–µ–Ω—é:\n${list}\n\n–ù–∞–∂–º–∏ –Ω–∞ –ø—É–Ω–∫—Ç, —á—Ç–æ–±—ã –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –µ–≥–æ:`,
        buildMenuManagementKeyboard(items),
      );
    }
  }

  async deleteMenuItem(ctx: Context, itemId: string) {
    const userId = this.getUserId(ctx);
    if (!userId) return;

    await this.menuService.remove(itemId);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
    const items = await this.menuService.findByOwner(userId);
    const list = items.map((i) => `‚Ä¢ ${i.title}`).join('\n') || '–ú–µ–Ω—é –ø—É—Å—Ç–æ–µ';

    if (ctx.editMessageText) {
      await ctx.editMessageText(
        `–¢–≤–æ—ë –º–µ–Ω—é:\n${list}\n\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –ø—É–Ω–∫—Ç:`,
        items.length > 0
          ? buildDeleteMenuKeyboard(items)
          : { reply_markup: { inline_keyboard: [] } }, // empty inline keyboard if no items
      );
    }
  }

  async startEditMenuItem(ctx: Context, itemId: string) {
    const userId = this.getUserId(ctx);
    if (!userId) return;

    const item = await this.menuService.findOne(itemId);
    if (!item) return;

    this.editingMenuItem.set(Number(userId), itemId);

    if (ctx.reply) {
      await ctx.reply(`–ù–∞–ø–∏—à–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è "${item.title}":`);
    }
  }

  async showPartnerMenu(ctx: Context) {
    const userId = this.getUserId(ctx);
    if (!userId) return;

    const user = await this.userService.findByTelegramId(userId);
    if (!user?.coupleId) {
      await ctx.reply(
        '–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø–∞—Ä—ã. –ü—Ä–∏–≥–ª–∞—Å–∏ –ø–∞—Ä—Ç–Ω—ë—Ä–∞, —á—Ç–æ–±—ã —Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –º–µ–Ω—é.',
      );
      return;
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø–∞—Ä—Ç–Ω—ë—Ä–∞
    const partner = await this.userService.findPartner(userId);
    if (!partner) {
      await ctx.reply('–ü–∞—Ä—Ç–Ω—ë—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      return;
    }
    const items = await this.menuService.findByOwner(partner.telegramId);

    if (items.length === 0) {
      await ctx.reply('–£ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–æ–µ –º–µ–Ω—é.');
      return;
    }

    await ctx.reply('–ú–µ–Ω—é –ø–∞—Ä—Ç–Ω—ë—Ä–∞:', buildPartnerMenuKeyboard(items));
  }

  async startOrder(ctx: Context, menuItemId: string) {
    const userId = this.getUserId(ctx);
    if (!userId) return;

    this.orderState.set(Number(userId), { menuItemId });
    await ctx.reply('–í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞:', currencyKeyboard);
  }

  async chooseCurrency(ctx: Context, currency: Currency) {
    const userId = this.getUserId(ctx);
    if (!userId) return;

    const state = this.orderState.get(Number(userId));
    if (!state) return;

    state.currency = currency;
    this.orderState.set(Number(userId), state);

    await ctx.reply(
      `–£–∫–∞–∂–∏ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–∑–∞–≤—Ç—Ä–∞", "–¥–æ ${new Date(Date.now() + 24 * 60 * 60 * 1000).toDateString()}"):`,
    );
  }

  async generateInviteLink(ctx: Context) {
    const userId = this.getUserId(ctx);
    if (!userId) return;

    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let user = await this.userService.findByTelegramId(userId);
    if (!user) {
      user = await this.userService.create({
        telegramId: userId,
        name: ctx.from?.first_name || '–ë–µ–∑ –∏–º–µ–Ω–∏',
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –ø–∞—Ä–∞ ‚Äî –Ω–µ –¥–∞—ë–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–Ω–≤–∞–π—Ç
    if (user.coupleId) {
      await ctx.reply('–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –ø–∞—Ä–∞ ‚Äî –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è ‚ù§Ô∏è');
      return;
    }

    // –°–æ–∑–¥–∞—ë–º –∏–Ω–≤–∞–π—Ç
    const invite = await this.inviteService.createInvite(user.id);

    const botUsername = (await ctx.telegram.getMe()).username;
    const link = `https://t.me/${botUsername}?start=invite_${invite.token}`;

    await ctx.reply(`–û—Ç–ø—Ä–∞–≤—å —ç—Ç—É —Å—Å—ã–ª–∫—É –ø–∞—Ä—Ç–Ω—ë—Ä—É:\n${link}`);
  }

  async handleInvite(ctx: Context, token: string) {
    const userId = this.getUserId(ctx);
    if (!userId) return;

    // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let user = await this.userService.findByTelegramId(userId);
    if (!user) {
      user = await this.userService.create({
        telegramId: userId,
        name: ctx.from?.first_name || '–ë–µ–∑ –∏–º–µ–Ω–∏',
      });
    }

    if (user.coupleId) {
      await ctx.reply('–¢—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ –ø–∞—Ä–µ ‚ù§Ô∏è');
      const invite = await this.inviteService.findByToken(token); // –º–µ—Ç–æ–¥ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å
      if (invite) {
        const creator = await this.userService.findById(invite.creatorId);
        if (creator?.telegramId) {
          await ctx.telegram.sendMessage(
            Number(creator.telegramId),
            '–ß–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä–æ–º—É —Ç—ã –æ—Ç–ø—Ä–∞–≤–∏–ª —Å—Å—ã–ª–∫—É, —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –ø–∞—Ä–µ –∏ –Ω–µ –º–æ–∂–µ—Ç –µ—ë –ø—Ä–∏–Ω—è—Ç—å.',
          );
        }
      }

      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    const creatorId = await this.inviteService.useInvite(token);
    if (!creatorId) {
      await ctx.reply('–≠—Ç–∞ —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞.');
      return;
    }

    if (creatorId === user.id) {
      await ctx.reply('–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É üòÖ');
      return;
    }

    // –°–æ–∑–¥–∞—ë–º –ø–∞—Ä—É
    await this.userService.createCouple(creatorId, user.id);

    await this.handleStart(ctx);
  }

  async acceptOrder(ctx: Context, orderId: string) {
    const order = await this.orderService.findById(orderId);
    if (!order) {
      await ctx.reply('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.');
      return;
    }

    await this.orderService.updateStatus(orderId, OrderStatus.ACCEPTED);

    await ctx.editMessageText(
      '–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –ö–æ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω–∏—à—å ‚Äî –Ω–∞–∂–º–∏ "–í—ã–ø–æ–ª–Ω–µ–Ω–æ".',
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ üéâ', callback_data: `complete_${orderId}` }],
          ],
        },
      },
    );

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    const sender = await this.userService.findById(order.fromUserId);
    if (sender?.telegramId) {
      await ctx.telegram.sendMessage(
        Number(sender.telegramId),
        `–¢–≤–æ–π –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –ñ–¥—ë–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è üíï`,
      );
    }
  }

  async rejectOrder(ctx: Context, orderId: string) {
    const order = await this.orderService.findById(orderId);
    if (!order) {
      await ctx.reply('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.');
      return;
    }

    await this.orderService.updateStatus(orderId, OrderStatus.REJECTED);

    await ctx.editMessageText('–ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω—ë–Ω ‚ùå');

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    const sender = await this.userService.findById(order.fromUserId);
    if (sender?.telegramId) {
      await ctx.telegram.sendMessage(
        Number(sender.telegramId),
        '–¢–≤–æ–π –∑–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω—ë–Ω üòî',
      );
    }
  }

  async confirmReset(ctx: Context) {
    await ctx.reply(
      '–¢—ã —Ç–æ—á–Ω–æ —Ö–æ—á–µ—à—å —Ä–∞–∑–æ—Ä–≤–∞—Ç—å –ø–∞—Ä—É? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.',
      confirmResetKeyboard,
    );
  }

  async handleResetConfirm(ctx: Context) {
    const userId = this.getUserId(ctx);
    if (!userId) return;

    const user = await this.userService.findByTelegramId(userId);
    if (!user) {
      await ctx.reply('–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –≤ –±–æ—Ç–µ.');
      return;
    }

    const partnerId = await this.userService.resetCouple(user.id);

    if (!partnerId) {
      await ctx.editMessageText('–£ —Ç–µ–±—è –Ω–µ—Ç –ø–∞—Ä—ã –¥–ª—è —Å–±—Ä–æ—Å–∞.');
      return;
    }

    await ctx.editMessageText(
      '–ü–∞—Ä–∞ —Ä–∞–∑–æ—Ä–≤–∞–Ω–∞. –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é.',
    );

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–∞—Ä—Ç–Ω—ë—Ä–∞
    const partner = await this.userService.findById(partnerId);
    if (partner?.telegramId) {
      await ctx.telegram.sendMessage(
        Number(partner.telegramId),
        '–¢–≤–æ–π –ø–∞—Ä—Ç–Ω—ë—Ä —Ä–∞–∑–æ—Ä–≤–∞–ª –ø–∞—Ä—É. –¢–µ–ø–µ—Ä—å –≤—ã –±–æ–ª—å—à–µ –Ω–µ —Å–≤—è–∑–∞–Ω—ã.',
      );
    }
  }

  async handleResetCancel(ctx: Context) {
    await ctx.editMessageText('–°–±—Ä–æ—Å –ø–∞—Ä—ã –æ—Ç–º–µ–Ω—ë–Ω.');
  }

  async completeOrder(ctx: Context, orderId: string) {
    const order = await this.orderService.findById(orderId);
    if (!order) {
      await ctx.reply('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    await this.orderService.updateStatus(orderId, OrderStatus.COMPLETED);
    await ctx.editMessageText('–ó–∞–∫–∞–∑ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π üéâ');

    if (order.currency !== 'message') {
      const executor = await this.userService.findById(order.toUserId);
      if (executor) {
        if (order.currency === 'kiss') {
          await this.userService.updateBalance(executor.id, {
            kissesBalance: executor.kissesBalance + 1,
          });
        } else if (order.currency === 'hug') {
          await this.userService.updateBalance(executor.id, {
            hugsBalance: executor.hugsBalance + 1,
          });
        }
      }

      const creator = await this.userService.findById(order.fromUserId);
      if (creator?.telegramId) {
        await ctx.telegram.sendMessage(
          Number(creator.telegramId),
          `–¢–≤–æ–π –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω! –í–∞–ª—é—Ç–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∞ üéâ`,
        );
      }
      return;
    }

    // –ï—Å–ª–∏ –≤–∞–ª—é—Ç–∞ ‚Äî –ø–æ—Å–ª–∞–Ω–∏–µ
    const creator = await this.userService.findById(order.fromUserId);
    if (creator?.telegramId) {
      await ctx.telegram.sendMessage(
        Number(creator.telegramId),
        `–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –ø–æ—Å–ª–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—É—á–∏—Ç —Ç–≤–æ–π –ø–∞—Ä—Ç–Ω—ë—Ä üíå`,
      );

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –∂–¥—ë–º –ø–æ—Å–ª–∞–Ω–∏–µ
      this.orderState.set(Number(creator.telegramId), {
        menuItemId: order.menuItemId,
        currency: Currency.MESSAGE,
        message: `order:${orderId}`,
      });
    }
  }

  async showBalance(ctx: Context) {
    const userId = this.getUserId(ctx);
    if (!userId) return;

    const user = await this.userService.findByTelegramId(userId);
    if (!user) {
      await ctx.reply('–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è.');
      return;
    }

    await ctx.reply(
      `–¢–≤–æ–π –±–∞–ª–∞–Ω—Å:\n\n–ü–æ—Ü–µ–ª—É–µ–≤: ${user.kissesBalance}\n–û–±–Ω–∏–º–∞—à–µ–∫: ${user.hugsBalance}`,
    );
  }

  async showOrderHistory(ctx: Context) {
    const userId = this.getUserId(ctx);
    if (!userId) return;

    const user = await this.userService.findByTelegramId(userId);
    if (!user) {
      await ctx.reply('–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è.');
      return;
    }

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∑–∞–∫–∞–∑—ã, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –∑–∞–∫–∞–∑—á–∏–∫ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
    const orders = await this.orderService.findByUser(user.id);

    if (orders.length === 0) {
      await ctx.reply('–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.');
      return;
    }

    const history = orders
      .map(async (o) => {
        const role = o.fromUserId === user.id ? '–¢—ã –∑–∞–∫–∞–∑–∞–ª' : '–¢–µ–±–µ –∑–∞–∫–∞–∑–∞–ª–∏';
        const status =
          o.status === 'completed'
            ? '‚úÖ –≤—ã–ø–æ–ª–Ω–µ–Ω'
            : o.status === 'accepted'
              ? '‚è≥ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ'
              : o.status === 'pending'
                ? '‚åõ –æ–∂–∏–¥–∞–µ—Ç'
                : '‚ùå –æ—Ç–∫–ª–æ–Ω—ë–Ω';
        const menuItem = await this.menuService.findOne(o.menuItemId);
        return `${role}: ${menuItem?.title || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} ${o.currency} ‚Äî ${o.deadline} (${status})`;
      })
      .join('\n\n');

    await ctx.reply(`–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤:\n\n${history}`);
  }
}
